import {Inject, Injectable} from '@angular/core';
import {Router} from '@angular/router';
import {HttpClient, HttpHeaders, HttpParams, HttpRequest} from '@angular/common/http';
import {CookieXSRFStrategy, Http, RequestOptions} from '@angular/http';
import {Observable} from 'rxjs/Observable';
import {BASE_URL_OAUTH2_TOKEN_REQUEST} from '../app.tokens';
import {Uzer} from './Uzer';

@Injectable()
export class UzerLoginService {
  constructor(
    private _router: Router, private _http: HttpClient, @Inject(BASE_URL_OAUTH2_TOKEN_REQUEST) private tokenUrl:string){}

  obtainAccessToken(loginData){
    let params = new HttpParams();
    params.append('username',loginData.username);
    params.append('password',loginData.password);
    params.append('grant_type','password');
    params.append('acme','Pa$$w0rd');
    let headers = new HttpHeaders({'Content-type':'application/x-www-form-urlencoded; charset=utf-8','Authorization': 'Basic '+btoa("Pa$$w0rd:secret")});
    let options = new HttpRequest();
    options._http.options(headers)

    this._http.post('http://localhost:808/spring-security-oauth-server/oauth/token', params.toString(), options)
      .map(res => res.json())
      .subscribe(
        data => this.saveToken(data),
        err => alert('Invalid Credentials'));
  }

  saveToken(token){
    var expireDate = new Date().getTime() + (1000 * token.expires_in);
    Cookie.set("access_token", token.access_token, expireDate);
    this._router.navigate(['/']);
  }

  getResource(resourceUrl) : Observable<Uzer>{
    var headers = new HttpHeaders();
    headers.set({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8', 'Authorization': 'Bearer '+Cookie.get('access_token')});
    var options = new HttpRequest();
    options.toPromise(headers);
    return this._http.get(resourceUrl, options)
      .map((res:Response) => res.json())
      .catch((error:any) => Observable.throw(error.json().error || 'Server error'));
  }

  checkCredentials(){
    if (!Cookie.check('access_token')){
      this._router.navigate(['/login']);
    }
  }

  logout() {
    Cookie.delete('access_token');
    this._router.navigate(['/login']);
  }
}
